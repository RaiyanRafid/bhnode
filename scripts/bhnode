#!/usr/bin/env bash
set -euo pipefail

PROGRAM_NAME="bhnode"
VERSION="1.0.0"
CONFIG_FILE="/etc/bhnode.conf"

# Colors
BOLD="\033[1m"; NORMAL="\033[0m"; GREEN="\033[32m"; YELLOW="\033[33m"; RED="\033[31m"; CYAN="\033[36m"

say() { echo -e "${CYAN}${PROGRAM_NAME}${NORMAL}: $*"; }
ok() { echo -e "${GREEN}✔${NORMAL} $*"; }
warn() { echo -e "${YELLOW}⚠${NORMAL} $*"; }
err() { echo -e "${RED}✖${NORMAL} $*" 1>&2; }

have_cmd() { command -v "$1" >/dev/null 2>&1; }

read_config() {
  if [[ -f "${CONFIG_FILE}" ]]; then
    # shellcheck disable=SC1090
    . "${CONFIG_FILE}"
  fi
}

ensure_sudo() {
  if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
    if ! have_cmd sudo; then
      err "This script requires root privileges (sudo not found). Run as root or install sudo."; exit 1
    fi
  fi
}

as_root() {
  if [[ "${EUID:-$(id -u)}" -eq 0 ]]; then
    "$@"
  else
    sudo "$@"
  fi
}

check_ubuntu() {
  if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    if [[ "${ID:-}" != "ubuntu" ]]; then
      warn "This script targets Ubuntu. Detected: ${PRETTY_NAME:-unknown}. Proceeding anyway."
      return 0
    fi
    case "${VERSION_ID:-}" in
      22.04|24.04) ok "Detected Ubuntu ${VERSION_ID}." ;;
      *) warn "Untested Ubuntu version: ${VERSION_ID:-unknown}. Proceeding." ;;
    esac
  else
    warn "/etc/os-release not found. Proceeding without OS check."
  fi
}

update_apt() {
  say "Updating apt package index..."
  as_root apt-get update -y
}

install_prereqs() {
  say "Installing prerequisites: curl, ca-certificates, gnupg..."
  as_root apt-get install -y curl ca-certificates gnupg lsb-release
}

install_nodejs() {
  check_ubuntu
  install_prereqs
  say "Installing Node.js (LTS) via NodeSource..."
  if ! have_cmd curl; then as_root apt-get install -y curl; fi
  curl -fsSL https://deb.nodesource.com/setup_lts.x | as_root -E bash -
  update_apt
  as_root apt-get install -y nodejs
  if have_cmd corepack; then
    say "Enabling corepack..."
    as_root corepack enable || true
  fi
  if have_cmd node; then
    ok "Node.js $(node -v) installed."
  else
    err "Node.js installation appears to have failed."; exit 1
  fi
}

install_pm2() {
  if ! have_cmd node; then
    warn "Node.js not found. Installing Node.js first..."
    install_nodejs
  fi
  say "Installing PM2 globally..."
  as_root npm install -g pm2
  if have_cmd pm2; then ok "PM2 $(pm2 -v) installed."; else err "PM2 install failed."; exit 1; fi
}

update_npm() {
  if ! have_cmd node; then
    warn "Node.js not found. Installing Node.js first..."
    install_nodejs
  fi
  say "Updating npm to latest..."
  as_root npm install -g npm@latest
  ok "npm $(npm -v) installed."
}

install_certbot() {
  say "Installing Certbot via snap (recommended)..."
  if ! have_cmd snap; then
    warn "snap not found. Installing snapd..."
    update_apt
    as_root apt-get install -y snapd
  fi
  as_root snap install core || true
  as_root snap refresh core || true
  as_root snap install --classic certbot
  if [[ ! -e /usr/bin/certbot ]]; then
    as_root ln -sf /snap/bin/certbot /usr/bin/certbot
  fi
  if have_cmd certbot; then ok "Certbot $(certbot --version | awk '{print $2}') installed."; else err "Certbot install failed."; exit 1; fi
}

# Update the bhnode script from a configured repository
update_self() {
  read_config
  local repo_url="${BHNODE_REPO_URL:-${REPO_URL:-}}"
  local raw_base="${BHNODE_RAW_BASE:-${RAW_BASE:-}}"

  # If installed within a git repo, try git pull first
  local script_dir
  script_dir="$(dirname "$(readlink -f "$0" 2>/dev/null || realpath "$0" 2>/dev/null || echo "$0")")"
  if have_cmd git && git -C "$script_dir" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    say "Updating from git repository in $script_dir ..."
    as_root git -C "$script_dir" pull --ff-only || warn "git pull failed, falling back to raw download if configured."
  fi

  # Determine raw URL base if not provided and repo_url is a GitHub URL
  if [[ -z "$raw_base" && -n "$repo_url" ]]; then
    if [[ "$repo_url" =~ ^https?://github.com/([^/]+)/([^/]+)(\.git)?$ ]]; then
      local user="${BASH_REMATCH[1]}" repo="${BASH_REMATCH[2]}"
      raw_base="https://raw.githubusercontent.com/${user}/${repo}/main"
    fi
  fi

  if [[ -z "$raw_base" ]]; then
    err "No update source configured. Set BHNODE_RAW_BASE or BHNODE_REPO_URL (GitHub) or add to ${CONFIG_FILE}."
    err "Example RAW base: https://raw.githubusercontent.com/<user>/<repo>/main"
    exit 1
  fi

  local tmp="$(mktemp -d)"
  trap 'rm -rf "$tmp"' EXIT
  local src_url="${raw_base}/scripts/bhnode"
  say "Downloading latest script from: $src_url"
  if ! curl -fsSL "$src_url" -o "$tmp/bhnode"; then
    err "Failed to download $src_url"; exit 1
  fi
  if ! grep -q "^#!/usr/bin/env bash" "$tmp/bhnode"; then
    err "Downloaded file does not look like a valid script."; exit 1
  fi
  chmod 755 "$tmp/bhnode"

  local dest="/usr/local/bin/${PROGRAM_NAME}"
  say "Installing updated script to ${dest}"
  as_root install -m 755 "$tmp/bhnode" "$dest"
  ok "Updated. Version: $($dest --version || true)"
}

show_menu() {
  echo -e "${BOLD}BH Node Setup Menu${NORMAL}"
  echo "1) Install Node.js (LTS)"
  echo "2) Install PM2"
  echo "3) Update npm to latest"
  echo "4) Install Certbot"
  echo "5) Update bhnode (self-update)"
  echo "q) Quit"
  read -rp "Select an option: " choice
  case "$choice" in
    1) install_nodejs ;;
    2) install_pm2 ;;
    3) update_npm ;;
    4) install_certbot ;;
    5) update_self ;;
    q|Q) exit 0 ;;
    *) err "Invalid option."; exit 1 ;;
  esac
}

show_help() {
  cat <<EOF
${PROGRAM_NAME} ${VERSION}
Simple Ubuntu 22.04/24.04 setup helper.

Usage:
  ${PROGRAM_NAME}                 # interactive menu
  ${PROGRAM_NAME} help            # show this help
  ${PROGRAM_NAME} version         # show version
  ${PROGRAM_NAME} nodejs          # install Node.js (LTS)
  ${PROGRAM_NAME} pm2             # install PM2 globally
  ${PROGRAM_NAME} npm-update      # update npm to latest globally
  ${PROGRAM_NAME} certbot         # install Certbot (via snap)
  ${PROGRAM_NAME} update          # self-update from configured GitHub repo/raw URL
EOF
}

main() {
  if [[ $# -eq 0 ]]; then
    show_menu; exit 0
  fi
  case "${1:-}" in
    help|-h|--help) show_help ;;
    version|-v|--version) echo "${PROGRAM_NAME} ${VERSION}" ;;
    nodejs) install_nodejs ;;
    pm2) install_pm2 ;;
    npm-update|npmupdate|npm) update_npm ;;
    certbot) install_certbot ;;
    update|self-update|upgrade) update_self ;;
    *) err "Unknown command: $1"; echo; show_help; exit 1 ;;
  esac
}

main "$@"
